package inter;

import static util.Print.*;

/**
 * Title: CycleFactories.class<br>
 * Description: <br>
 * Copyright (c) 人和网版权所有 2017 <br>
 * Create DateTime: 2018年3月19日 下午4:10:13 <br>
 *
 * @author gaoxing
 */
interface Cycle {
	void method1();

	void method2();
}

interface CycleFactory {
	Cycle getCycle();
}

class Unicycle implements Cycle {

	@Override
	public void method1() {
		print("Unicycle method1");
	}

	@Override
	public void method2() {
		print("Unicycle method2");
	}
}

class UnicycleFactory implements CycleFactory {

	@Override
	public Cycle getCycle() {
		return new Unicycle();
	}

}

class Bicycle implements Cycle {

	private Bicycle() {
		
	}
	
	public static final CycleFactory bicycleFactory = new CycleFactory() {
		@Override
		public Cycle getCycle() {
			return null;
		}
	};
	
	@Override
	public void method1() {
		print("Bicycle method1");
	}

	@Override
	public void method2() {
		print("Bicycle method2");
	}

}

class BicycleFactory implements CycleFactory {

	@Override
	public Cycle getCycle() {
		return new Bicycle();
	}

}

class Tricycle implements Cycle {

	@Override
	public void method1() {
		print("Tricycle method1");
	}

	@Override
	public void method2() {
		print("Tricycle method2");
	}

}

class TricycleFactory implements CycleFactory {

	@Override
	public Cycle getCycle() {
		return new Tricycle();
	}

}

public class CycleFactories {
	public static void cycleFactory(CycleFactory cycleFactory) {
		Cycle cycle = cycleFactory.getCycle();
		cycle.method1();
		cycle.method2();
	}

	public static void main(String[] args) {
		cycleFactory(new UnicycleFactory());
		cycleFactory(new BicycleFactory());
		cycleFactory(new TricycleFactory());
	}
}
